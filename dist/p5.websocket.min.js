var $k52p8$swchelperscjs_class_call_checkcjs = require("@swc/helpers/cjs/_class_call_check.cjs");
var $k52p8$swchelperscjs_create_classcjs = require("@swc/helpers/cjs/_create_class.cjs");
var $k52p8$buffer = require("buffer");
var $k52p8$eventemitter3 = require("eventemitter3");
var $k52p8$debug = require("debug");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
// keep this file as simple as possible since it is difficult to test
//
// The internal WebSocket wrapping interface. You should never need to access
// this directly from p5.js sketches.
//





var $d36885613cf6c20d$require$Buffer = $k52p8$buffer.Buffer;
var $d36885613cf6c20d$var$debug = (0, ($parcel$interopDefault($k52p8$debug)))("p5.websocket:socket");
function $d36885613cf6c20d$var$tryParse(jsonString) {
    $d36885613cf6c20d$var$debug("try parsing", jsonString);
    try {
        var data = JSON.parse(jsonString);
        return data;
    } catch (ex) {
        // expect that messages may be plain strings
        $d36885613cf6c20d$var$debug("failed to parse as JSON:", jsonString);
        return jsonString;
    }
}
var $d36885613cf6c20d$var$WebSocketClient = /*#__PURE__*/ function() {
    "use strict";
    function WebSocketClient() {
        (0, $k52p8$swchelperscjs_class_call_checkcjs._)(this, WebSocketClient);
        this.reconnect_interval = 1500;
    }
    (0, $k52p8$swchelperscjs_create_classcjs._)(WebSocketClient, [
        {
            key: "open",
            value: function open(url) {
                this.url = url;
                this.instance = new WebSocket(this.url);
                var self = this;
                this.instance.onopen = function() {
                    $d36885613cf6c20d$var$debug("[WebSocketClient on open]");
                    self.onopen();
                };
                this.instance.onclose = function(evt) {
                    $d36885613cf6c20d$var$debug("[WebSocketClient on close]");
                    switch(evt.code){
                        case 1000:
                            $d36885613cf6c20d$var$debug("WebSocketClient: closed");
                            break;
                        default:
                            // Abnormal closure
                            self.reconnect(evt);
                            break;
                    }
                    if (self.onclose) self.onclose(evt);
                };
                this.instance.onerror = function(evt) {
                    $d36885613cf6c20d$var$debug("[WebSocketClient on error]");
                    switch(evt.code){
                        case "ECONNREFUSED":
                            self.reconnect(evt);
                            break;
                        default:
                            if (self.onerror) self.onerror(evt);
                            break;
                    }
                };
                this.instance.onmessage = function(evt) {
                    $d36885613cf6c20d$var$debug("[WebSocketClient on message]");
                    self.onmessage(evt.data);
                };
                $d36885613cf6c20d$var$debug("[WebSocketClient open] completed");
            }
        },
        {
            key: "removeAllListeners",
            value: function removeAllListeners() {
                this.instance.onopen = null;
                this.instance.onclose = null;
                this.instance.onerror = null;
                this.instance.onmessage = null;
            }
        },
        {
            key: "reconnect",
            value: function reconnect(evt) {
                $d36885613cf6c20d$var$debug("WebSocketClient: retry in", this.reconnect_interval, "ms", evt);
                this.removeAllListeners();
                var self = this;
                setTimeout(function() {
                    $d36885613cf6c20d$var$debug("WebSocketClient: reconnecting...");
                    self.open(self.url);
                }, this.reconnect_interval);
            }
        },
        {
            key: "send",
            value: function send(message) {
                if (typeof message === "string") this.instance.send(message);
                else this.instance.send(JSON.stringify(message));
            }
        },
        {
            // detach event listeners and close the socket
            key: "close",
            value: function close() {
                if (this.instance.readyState !== WebSocket.CLOSED) this.instance.close();
            }
        }
    ]);
    return WebSocketClient;
}();
var $d36885613cf6c20d$export$3fdcbfc49a90c557 = function(url) {
    var socketEvents = new (0, ($parcel$interopDefault($k52p8$eventemitter3)))();
    var sock = new $d36885613cf6c20d$var$WebSocketClient(socketEvents);
    sock.open(url);
    function send(message) {
        sock.send(message);
    }
    function close() {
        try {
            sock.close();
        } catch (ex) {
            console.error("close failed", ex.message);
        }
    }
    socketEvents.on("close", close);
    sock.onopen = function startWebsocket() {
        $d36885613cf6c20d$var$debug("socket connected");
        // external client-to-library API "methods"
        socketEvents.on("send", send);
    };
    sock.onclose = function() {
        $d36885613cf6c20d$var$debug("socket closed");
        socketEvents.removeListener("send", send);
        socketEvents.removeListener("close", close);
        socketEvents.emit("onclose");
    };
    sock.onerror = sock.onclose;
    function handleDataString(data) {
        var message = JSON.parse(data);
        if (message.type) switch(message.type){
            case "onopen":
                socketEvents.emit("onopen", message.id);
                break;
            case "connect":
                socketEvents.emit("connect", message.id);
                break;
            case "disconnect":
                socketEvents.emit("disconnect", message.id);
                break;
            case "data":
                $d36885613cf6c20d$var$debug("receiving data", message);
                // try parsing data in case it's double-wrapped JSON
                var _$data = $d36885613cf6c20d$var$tryParse(message.data);
                socketEvents.emit("data", _$data, message.id);
                break;
        }
        else socketEvents.emit("data", message, message.id);
    }
    sock.onmessage = function(data) {
        if (data instanceof Blob || data instanceof $d36885613cf6c20d$require$Buffer) {
            $d36885613cf6c20d$var$debug("message data is Blob || Buffer");
            var reader = new FileReader();
            reader.onload = function() {
                handleDataString(reader.result);
            };
            reader.readAsText(data);
        } else if (typeof data == "string") {
            $d36885613cf6c20d$var$debug("message data is string");
            handleDataString(data);
        }
    };
    return socketEvents;
};


// naive query params serializer
var $2cd60b8f26771ecc$export$dfdc1655ccc5b9cb = function(obj) {
    return Object.keys(obj).map(function(key) {
        return encodeURIComponent(key) + "=" + encodeURIComponent(obj[key]);
    }).join("&");
};


var $5a974d74f77c6913$export$2a47f398eeff8b01 = function(p5) {
    var socket = null;
    var defaultOptions = {
        echo: true,
        receiver: true,
        controller: true
    };
    p5.prototype.connectWebsocket = function initialize(url) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var config = Object.assign({}, defaultOptions, options);
        var fullUrl = url + "?" + (0, $2cd60b8f26771ecc$export$dfdc1655ccc5b9cb)(config);
        socket = (0, $d36885613cf6c20d$export$3fdcbfc49a90c557)(fullUrl);
        // this client's connection
        socket.on("onopen", function(uid) {
            if (window.onConnection) onConnection(uid);
        });
        // this client's connection
        socket.on("onclose", function() {
            if (window.onDisconnection) onDisconnection();
        });
        // other clients' connections
        socket.on("connect", function(message) {
            if (window.connectReceived) connectReceived(message);
        });
        socket.on("disconnect", function(message) {
            if (window.disconnectReceived) disconnectReceived(message);
        });
        socket.on("data", function(message, uid) {
            if (window.messageReceived) messageReceived(message, uid);
        });
    };
    p5.prototype.sendMessage = function(message) {
        if (socket) {
            if (window.WS_DEBUG) console.log("sendin", message);
            socket.emit("send", message);
        }
    };
};


window.WS_DEBUG = false;
var $6be4b30feeb09703$var$p5 = window.p5;
(0, $5a974d74f77c6913$export$2a47f398eeff8b01)($6be4b30feeb09703$var$p5);


//# sourceMappingURL=p5.websocket.min.js.map
