{"version":3,"sources":["../node_modules/eventemitter3/index.js","socket.js","index.js"],"names":["window","DEBUG","WebSocketClient","reconnect_interval","url","instance","WebSocket","self","onopen","console","log","onclose","evt","code","reconnect","onerror","onmessage","data","removeAllListeners","setTimeout","open","message","send","JSON","stringify","startWebsocket","callback","socketEvents","EventEmitter3","sock","handleDataString","parse","emit","key","value","created_at","mode","on","removeListener","Blob","reader","FileReader","onload","result","readAsText","p5","socket","prototype","connectWebsocket","messageReceived","sendMessage"],"mappings":"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","file":"p5.websocket.min.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import EventEmitter3 from \"eventemitter3\";\n\nwindow.DEBUG = false;\n\nclass WebSocketClient {\n  constructor() {\n    this.reconnect_interval = 1500;\n  }\n\n  open(url) {\n    this.url = url;\n    this.instance = new WebSocket(this.url);\n\n    var self = this;\n\n    this.instance.onopen = function () {\n      if (window.DEBUG) console.log(\"[WebSocketClient on open]\");\n      self.onopen();\n    };\n\n    this.instance.onclose = function (evt) {\n      if (window.DEBUG) console.log(\"[WebSocketClient on close]\");\n      switch (evt.code) {\n        case 1000: // CLOSE_NORMAL\n          if (window.DEBUG) console.log(\"WebSocketClient: closed\");\n          break;\n        default:\n          // Abnormal closure\n          self.reconnect(evt);\n          break;\n      }\n      if (self.onclose) self.onclose(evt);\n    };\n\n    this.instance.onerror = function (evt) {\n      if (window.DEBUG) console.log(\"[WebSocketClient on error]\");\n      switch (evt.code) {\n        case \"ECONNREFUSED\":\n          self.reconnect(evt);\n          break;\n        default:\n          if (self.onerror) self.onerror(evt);\n          break;\n      }\n    };\n\n    this.instance.onmessage = function (evt) {\n      if (window.DEBUG) console.log(\"[WebSocketClient on message]\");\n      self.onmessage(evt.data);\n    };\n\n    if (window.DEBUG) console.log(\"[WebSocketClient open] completed\");\n  }\n\n  removeAllListeners() {\n    this.instance.onopen = null;\n    this.instance.onclose = null;\n    this.instance.onerror = null;\n    this.instance.onmessage = null;\n  }\n\n  reconnect() {\n    if (window.DEBUG)\n      console.log(\n        \"WebSocketClient: retry in\",\n        this.reconnect_interval,\n        \"ms\",\n        evt\n      );\n    this.removeAllListeners();\n\n    var self = this;\n    setTimeout(function () {\n      if (window.DEBUG) console.log(\"WebSocketClient: reconnecting...\");\n      self.open(self.url);\n    }, this.reconnect_interval);\n  }\n\n  send(message) {\n    if (typeof message === \"string\") {\n      this.instance.send(message);\n    } else {\n      this.instance.send(JSON.stringify(message));\n    }\n  }\n}\n\nexport const startWebsocket = (url, callback) => {\n  const socketEvents = new EventEmitter3();\n  const sock = new WebSocketClient(socketEvents);\n\n  sock.open(url);\n\n  function send(message) {\n    sock.send(message);\n  }\n\n  sock.onopen = function () {\n    console.log(\"socket connected\");\n    socketEvents.on(\"send\", send);\n  };\n\n  sock.onclose = function () {\n    console.log(\"socket closed\");\n    socketEvents.removeListener(\"send\", send);\n  };\n  sock.onerror = sock.onclose;\n\n  function handleDataString(data) {\n    var message = JSON.parse(data);\n    if (callback) {\n      callback(message);\n    } else {\n      socketEvents.emit(\"data.*\", message);\n      if (message.key) {\n        socketEvents.emit(\"data.\" + message.key, {\n          key: message.key,\n          value: message.value,\n          created_at: message.created_at,\n          mode: message.mode ? message.mode : \"live\",\n        });\n      } else {\n        socketEvents.emit(\"data\", message);\n      }\n    }\n  }\n\n  sock.onmessage = function (data) {\n    if (data instanceof Blob) {\n      var reader = new FileReader();\n      reader.onload = function () {\n        handleDataString(reader.result);\n      };\n      reader.readAsText(data);\n    } else if (typeof data == \"string\") {\n      handleDataString(data);\n    }\n  };\n\n  return socketEvents;\n};\n","import { startWebsocket } from \"./socket\";\n\nconst p5 = window.p5;\nlet socket = null;\n\np5.prototype.connectWebsocket = (url) => {\n  socket = startWebsocket(url);\n  socket.on(\"data\", (message) => {\n    if (window.messageReceived) {\n      messageReceived(message);\n    }\n  });\n};\n\np5.prototype.sendMessage = (message) => {\n  if (socket) {\n    socket.emit(\"send\", message);\n  }\n};\n"]}